/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.logigear.appium.main;

import com.logigear.appium.controller.UIDeviceModel;
import com.logigear.appium.controller.NodeController;
import com.logigear.appium.node.NodeModel;
import com.logigear.enviroment.Enviroment;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.net.URL;
import java.util.Properties;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JTextField;
import javax.swing.KeyStroke;
import javax.swing.text.DefaultEditorKit;

/**
 *
 * @author tin.tran
 */
public class StartAppiumNode extends javax.swing.JFrame {
    
    
    private static final int MASK = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
    private NodeController mController = new NodeController();
    private UIDeviceModel mDeviceModel = new UIDeviceModel();
    Properties mDeviceProperties = null;

    /**
     * Creates new form MainJFrame
     */
    public StartAppiumNode(String title) {
        super(title);
        initComponents();
        initEditMenu();
        initDeviceModel();     
        
        mDeviceModel.loadProperties(mDeviceProperties);
    }
    
    private void initEditMenu() {
        AbstractAction copyAction = new DefaultEditorKit.CopyAction();
        AbstractAction cutAction = new DefaultEditorKit.CutAction();
        AbstractAction pasteAction = new DefaultEditorKit.PasteAction();
        if (Enviroment.isMAC()) {
            copyAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_C, MASK));
            cutAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_X, MASK));
            pasteAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_V, MASK));
        }
        else {
            copyAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_C, KeyEvent.CTRL_MASK));
            cutAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_X, KeyEvent.CTRL_MASK));
            pasteAction.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_V, KeyEvent.CTRL_MASK));
        }
        
        this.menuCopy.setAction(copyAction);
        this.menuCopy.setText("Copy");
        this.menuCut.setAction(cutAction);
        this.menuPaste.setText("Cut");    
        this.menuPaste.setAction(pasteAction);
        this.menuPaste.setText("Paste");
    }
    
    private void initDeviceModel() {
        mDeviceModel.setCbxPlatform(cbxPlatform);
        mDeviceModel.setTxtDeviceName(txtDeviceName);
        mDeviceModel.setTxtUDID(txtUDID);
        mDeviceModel.setTxtPlatformVersion(txtPlatformVersion);
        mDeviceModel.setTxtAppiumAddress(txtAppiumAddress);
        mDeviceModel.setTxtAppiumPort(txtAppiumPort);
        mDeviceModel.setTxtAppiumGridServer(txtAppiumGridServer);
        mDeviceModel.setChbxConnectToGrid(chbxConnectToGrid);
        mDeviceModel.setTxtWebKitProxyPort(txtWebKitProxyPort);
        mDeviceModel.setTxtChromeDriverFullPath(txtChromeDriverFullPath);
        mDeviceModel.setBtnStartWebKitProxy(btnStartWebKitProxy);
        mDeviceModel.setBtnRun(btnRun);
        mDeviceModel.setAndroidPanel(androidPanel);
        mDeviceModel.setIosPanel(iosPanel);
        mDeviceModel.setBootstrapPort(txtBootstrapPort);
        mDeviceModel.setChboxAutoAppiumPort(chbxAutoAppiumPort);
        mDeviceModel.setChBoxAutoBootstrapPort(chbxAutoBootstrapPort);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbxPlatform = new javax.swing.JComboBox<>();
        iosPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtWebKitProxyPort = new javax.swing.JTextField();
        androidPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        txtChromeDriverFullPath = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        txtBootstrapPort = new javax.swing.JTextField();
        chbxAutoBootstrapPort = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtDeviceName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtUDID = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtPlatformVersion = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        txtAppiumAddress = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtAppiumPort = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtAppiumGridServer = new javax.swing.JTextField();
        chbxConnectToGrid = new javax.swing.JCheckBox();
        chbxAutoAppiumPort = new javax.swing.JCheckBox();
        btnRun = new javax.swing.JButton();
        btnStartWebKitProxy = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuExit = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        menuCut = new javax.swing.JMenuItem();
        menuCopy = new javax.swing.JMenuItem();
        menuPaste = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Start Appium Node");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(521, 621));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                StartAppiumNode.this.windowOpened(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                StartAppiumNode.this.windowClosing(evt);
            }
        });

        jLabel1.setText("Platform:");

        cbxPlatform.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Android", "iOS" }));
        cbxPlatform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxPlatformActionPerformed(evt);
            }
        });

        iosPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("iOS"));

        jLabel8.setText("webkit-proxy-port:");

        txtWebKitProxyPort.setText("27753");

        javax.swing.GroupLayout iosPanelLayout = new javax.swing.GroupLayout(iosPanel);
        iosPanel.setLayout(iosPanelLayout);
        iosPanelLayout.setHorizontalGroup(
            iosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iosPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtWebKitProxyPort))
        );
        iosPanelLayout.setVerticalGroup(
            iosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(iosPanelLayout.createSequentialGroup()
                .addGroup(iosPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtWebKitProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        androidPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Android"));

        jLabel6.setText("ChromeDriver Full Path:");

        txtChromeDriverFullPath.setText("F:\\chromedriver\\chromedriver51.exe");

        jLabel10.setText("Bootstrap port:");

        txtBootstrapPort.setText("4823");

        chbxAutoBootstrapPort.setSelected(true);
        chbxAutoBootstrapPort.setText("Auto-Increase");

        javax.swing.GroupLayout androidPanelLayout = new javax.swing.GroupLayout(androidPanel);
        androidPanel.setLayout(androidPanelLayout);
        androidPanelLayout.setHorizontalGroup(
            androidPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(androidPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(androidPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(androidPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtChromeDriverFullPath, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                    .addGroup(androidPanelLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtBootstrapPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chbxAutoBootstrapPort))))
        );
        androidPanelLayout.setVerticalGroup(
            androidPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(androidPanelLayout.createSequentialGroup()
                .addGroup(androidPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChromeDriverFullPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(androidPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtBootstrapPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbxAutoBootstrapPort)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Device Infomation"));

        jLabel2.setText("Device Name:");

        txtDeviceName.setText("Galaxy S6");
        txtDeviceName.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        jLabel3.setText("UDID:");

        txtUDID.setText("galaxy_s6.adb.appkitbox.com:7299");

        jLabel4.setText("Platform Version:");

        txtPlatformVersion.setText("5.0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUDID))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDeviceName))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPlatformVersion))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtDeviceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtUDID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtPlatformVersion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Appium"));

        jLabel9.setText("Address:");

        txtAppiumAddress.setText("127.0.0.1");

        jLabel5.setText("Port:");

        txtAppiumPort.setText("4723");

        jLabel7.setText("Grid Server:");

        txtAppiumGridServer.setText("127.0.0.1");
        txtAppiumGridServer.setEnabled(false);

        chbxConnectToGrid.setText("Connect to Grid");
        chbxConnectToGrid.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                chbxConnectToGridStateChanged(evt);
            }
        });

        chbxAutoAppiumPort.setSelected(true);
        chbxAutoAppiumPort.setText("Auto-Increase");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAppiumAddress))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAppiumPort)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chbxAutoAppiumPort))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtAppiumGridServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(chbxConnectToGrid, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtAppiumAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtAppiumPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbxAutoAppiumPort))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtAppiumGridServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chbxConnectToGrid))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(androidPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cbxPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(iosPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cbxPlatform, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(iosPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(androidPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        btnRun.setText("Run");
        btnRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRunActionPerformed(evt);
            }
        });

        btnStartWebKitProxy.setText("Start Webkit Proxy");
        btnStartWebKitProxy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartWebKitProxyActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        menuExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        menuExit.setText("Exit");
        menuExit.setToolTipText("");
        menuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuExitActionPerformed(evt);
            }
        });
        jMenu1.add(menuExit);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        menuCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.META_MASK));
        menuCut.setText("Cut");
        jMenu2.add(menuCut);

        menuCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.META_MASK));
        menuCopy.setText("Copy");
        jMenu2.add(menuCopy);

        menuPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.META_MASK));
        menuPaste.setText("Paste");
        jMenu2.add(menuPaste);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnStartWebKitProxy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRun)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRun)
                    .addComponent(btnStartWebKitProxy)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRunActionPerformed
        mController.runNode(mDeviceModel.getModel());
        mDeviceModel.increasePort();
    }//GEN-LAST:event_btnRunActionPerformed

    private void chbxConnectToGridStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_chbxConnectToGridStateChanged
        if (this.chbxConnectToGrid.isSelected()) {
            this.txtAppiumGridServer.setEnabled(true);
        }
        else {
            this.txtAppiumGridServer.setEnabled(false);
        }
    }//GEN-LAST:event_chbxConnectToGridStateChanged

    private void cbxPlatformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxPlatformActionPerformed
        String platform = (String) this.cbxPlatform.getSelectedItem();
        if (platform.equalsIgnoreCase("android")) {
            mDeviceModel.selectAndroid();
        }
        else {
            mDeviceModel.selectIOS();
        }
    }//GEN-LAST:event_cbxPlatformActionPerformed

    private void btnStartWebKitProxyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartWebKitProxyActionPerformed
        mController.startWebKitProxy(mDeviceModel.getModel());
    }//GEN-LAST:event_btnStartWebKitProxyActionPerformed

    private void menuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_menuExitActionPerformed

    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        mController.saveProperties(mDeviceModel.getProperties());
    }//GEN-LAST:event_windowClosing

    private void windowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowOpened
        Properties props = new Properties();
        boolean succeed = mController.readProperties(props);
        if (succeed) {
            mDeviceProperties = props;
            mDeviceModel.loadProperties(mDeviceProperties);
        }
    }//GEN-LAST:event_windowOpened

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        if (Enviroment.isMAC()) {
            System.setProperty("apple.laf.useScreenMenuBar", "true");
            System.setProperty("com.apple.mrj.application.apple.menu.about.name", "Name");
        }
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StartAppiumNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StartAppiumNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StartAppiumNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StartAppiumNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                URL iconURL = getClass().getClassLoader().getResource("com/logigear/appium/icon/appium.png");
//                ImageIcon img = new ImageIcon(iconURL);
                StartAppiumNode frame = new StartAppiumNode("Start Appium Node");
//                frame.setIconImage(img.getImage());
                frame.setVisible(true);
            }
        });
    }
    
    void buildCopyCutPasteContextMenu(JTextField textField) {
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel androidPanel;
    private javax.swing.JButton btnRun;
    private javax.swing.JButton btnStartWebKitProxy;
    private javax.swing.JComboBox<String> cbxPlatform;
    private javax.swing.JCheckBox chbxAutoAppiumPort;
    private javax.swing.JCheckBox chbxAutoBootstrapPort;
    private javax.swing.JCheckBox chbxConnectToGrid;
    private javax.swing.JPanel iosPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JMenuItem menuCopy;
    private javax.swing.JMenuItem menuCut;
    private javax.swing.JMenuItem menuExit;
    private javax.swing.JMenuItem menuPaste;
    private javax.swing.JTextField txtAppiumAddress;
    private javax.swing.JTextField txtAppiumGridServer;
    private javax.swing.JTextField txtAppiumPort;
    private javax.swing.JTextField txtBootstrapPort;
    private javax.swing.JTextField txtChromeDriverFullPath;
    private javax.swing.JTextField txtDeviceName;
    private javax.swing.JTextField txtPlatformVersion;
    private javax.swing.JTextField txtUDID;
    private javax.swing.JTextField txtWebKitProxyPort;
    // End of variables declaration//GEN-END:variables
}
